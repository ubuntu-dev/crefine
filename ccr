#!/bin/sh 
# Date: 92/05/07  Lutz Prechelt, Karlsruhe
# Version: 1.0
#
# cc-like front-end to C-Refine.
# Sends one or several files through crefine first, then through cc.
# All options are passed on to cc, i.e. no options can be specified for 
# crefine on the command line, but may be given in the environment variable
# CREFINEOPTIONS.
# If any error occurs during any crefine run, cc is not called.
#
# If you want to have an equivalent script for any other compiler or
# C-type language, just make a copy and adapt the values of
# $CC and $suffix accordingly, e.g.  CC=g++; suffix=".ccr"
# Rename the script and change the usage message appropriately.
#

if test $# -eq 0 ; then
  echo "Usage:  ccr [cc-options] [file.c[r] | file.o]..."
  exit 1
fi


CC="cc"                # compiler executable program
CREFINE=crefine        # C-Refine executable program
suffix=".cr"           # Suffix of C-Refine source program file names
crefineoptions=${CREFINEOPTIONS:-""}  # options to call $CREFINE with

cc_params=""
to_delete=""
errors=0

#----- scan parameters and execute crefine for every .cr file
while test $# -gt 0 ; do
  full_name=$1
  base_name=`basename $1 $suffix`
  result_name=`basename $1 "r"`   #what comes out of crefine
  if test $full_name = $base_name ; then
    cc_params="$cc_params $full_name"
  else
    $CREFINE $crefineoptions $full_name
    exit=$?
    if test $exit -gt 0 ; then
      errors=1
    else
      cc_params="$cc_params $result_name"
      to_delete="$to_delete $result_name"
    fi
  fi
  shift
done

#----- call $CC
if test $errors -eq 0 ; then
  $CC $cc_params
  errors=$?
fi

#----- perhaps delete files generated by $CREFINE
rm $to_delete         # comment this out if you don't want it

#----- exit
exit $errors

